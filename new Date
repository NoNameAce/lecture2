### New Dates

1. Current Date and Time:
      const now = new Date();
   console.log(now);
   


3. Date from String:
      const dateFromString = new Date('2024-08-29T10:30:00');
   console.log(dateFromString);
   




### Common Methods

1. Getting Date Components:
      const date = new Date();
   console.log(date.getFullYear()); // Year
   console.log(date.getMonth()); // Month (0-based)
   console.log(date.getDate()); // Day of the month
   console.log(date.getDay()); // Day of the week (0 = Sunday)
   console.log(date.getHours()); // Hours
   console.log(date.getMinutes()); // Minutes
   console.log(date.getSeconds()); // Seconds
   







   In JavaScript, the Set object is a built-in data structure that lets you store unique values of any type, whether primitive values or object references. It was introduced in ECMAScript 2015 (ES6) and has since become an essential part of the language. Here’s a comprehensive overview of the Set object, including new features and common use cases:



### New Set

You can create a Set using the Set constructor:

const mySet = new Set();

You can also initialize a Set with an array or another iterable:

const numbers = new Set([1, 2, 3, 4, 5]);

In JavaScript, the Set object has a range of methods to manage collections of unique values. While the core methods of Set have remained consistent since their introduction in ECMAScript 2015 (ES6), there are ongoing discussions and proposals for new methods that could enhance the functionality of Set. Here’s a comprehensive guide on both the existing methods and some proposed or experimental methods:

### Core Set Methods

1. `add(value)`
   - Description: Adds a new element to the Set. If the value already exists, it has no effect.
   - Usage:
          const mySet = new Set();
     mySet.add(1);
     mySet.add(2);
     console.log(mySet); // Set { 1, 2 }
     

2. `delete(value)`
   - Description: Removes the specified value from the Set. Returns true if the value was removed, or false if the value was not found.
   - Usage:
          mySet.delete(1);
     console.log(mySet); // Set { 2 }
     

3. `has(value)`
   - Description: Checks if a value exists in the Set. Returns true if the value is present, otherwise false.
   - Usage:
          console.log(mySet.has(2)); // true
     console.log(mySet.has(1)); // false
     

4. 

5. `forEach(callbackFn, thisArg)`
   - Description: Executes a provided function once for each value in the Set, in insertion order.
   - Usage:
          mySet.forEach(value => console.log(value));
     


   

7. `values()`
   - Description: Returns a new iterator object that contains the values of the Set in insertion order.
   - Usage:
          const iterator = mySet.values();
     for (const value of iterator) {
       console.log(value);
     }
     

8. `keys()`
   - Description: Returns a new iterator object that contains the keys of the Set. Since a Set is a collection of unique values, the keys are the same as the values.
   - Usage:
          const iterator = mySet.keys();
     for (const key of iterator) {
       console.log(key);
     }
